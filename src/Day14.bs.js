// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Belt_MapInt = require("bs-platform/lib/js/belt_MapInt.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var inputStr = "mask = 001X10110010XXX1011X10X0X010110011X0\nmem[7813] = 131\nmem[54447] = 69257\nmem[4649] = 764452\nmem[19188] = 31285\nmem[12729] = 12561\nmem[53924] = 61854625\nmem[30643] = 31622\nmask = X10X010101101011X011X0X1010XX0001101\nmem[65231] = 6306247\nmem[9606] = 842\nmem[35435] = 39105817\nmask = 00X010010XX01001011011111010010X10X0\nmem[15228] = 58105116\nmem[57434] = 3463765\nmem[65279] = 4039619\nmem[21972] = 185592\nmem[23182] = 637258\nmem[26506] = 21618105\nmem[59419] = 1185\nmask = 11100X1X1X1X100110X110011X1001X01100\nmem[41224] = 182354525\nmem[63664] = 11139\nmem[59848] = 465555194\nmem[7441] = 426\nmask = 0000X0XX100010X111101000100011010X00\nmem[32794] = 26498404\nmem[36528] = 4609841\nmem[52372] = 928374411\nmem[50746] = 13530768\nmask = X0X0011X01101XX1101X00X1110X00111011\nmem[23705] = 4702\nmem[53987] = 260925767\nmem[38759] = 107180723\nmem[4145] = 1388225\nmask = 01100X1X00111X0100XX10001X1X11X11011\nmem[21659] = 48254\nmem[47784] = 579\nmem[15339] = 3634\nmem[26981] = 17056\nmem[56944] = 7553\nmem[54362] = 25509\nmask = 11100011111X1X0X10010010X01X01X01100\nmem[36538] = 720281\nmem[40349] = 4553\nmem[38747] = 121580\nmem[47936] = 853\nmem[64464] = 14729\nmem[13543] = 7412\nmask = 0110X0X10X111001001010011001011XXXXX\nmem[59367] = 1805959\nmem[35408] = 1062861636\nmem[2438] = 104177\nmem[45204] = 49297768\nmask = 11110111X1X110X11111000010110X101X01\nmem[43520] = 50829\nmem[52879] = 6973\nmem[34130] = 1858472\nmem[30580] = 116283566\nmem[59200] = 77309650\nmem[39793] = 19368\nmem[21462] = 484824\nmask = 0111X001100011X11X0000001X1010XX101X\nmem[48944] = 713350\nmem[15050] = 125604\nmem[62553] = 4265286\nmem[32331] = 207\nmask = 00101X010X00X00110X0010X00000X010000\nmem[37193] = 24490589\nmem[47114] = 24972867\nmem[19137] = 85518698\nmem[28948] = 15755\nmem[63089] = 207050481\nmask = 0X001000XX10100X111010X011XX1000X100\nmem[21622] = 12726803\nmem[65486] = 259190646\nmem[9456] = 367\nmem[57461] = 22120\nmem[47219] = 461\nmem[42381] = 905567\nmask = 011XX001100011X110X0X00X001X010X0010\nmem[41554] = 246921\nmem[47818] = 12679687\nmem[48892] = 139693999\nmask = 00001X0XX01010XX11X010101100X00011XX\nmem[15036] = 387380\nmem[4946] = 2220181\nmem[3330] = 3484229\nmem[60601] = 708273\nmem[30390] = 22847\nmask = X11010110X11100X0010X00X0001X0X1100X\nmem[26506] = 48168688\nmem[39792] = 1782856\nmem[35767] = 30354\nmem[3782] = 3439\nmem[25399] = 804\nmask = X01X10X10X0X1001001X0X0100X100001100\nmem[36728] = 830047900\nmem[39236] = 454\nmem[35767] = 4930\nmask = X1XX101010XX1001101X0X0000X000001100\nmem[26504] = 38\nmem[26618] = 6509202\nmem[55528] = 49356209\nmem[39373] = 427885078\nmem[6797] = 35727\nmem[60494] = 11588408\nmask = 0X1000X1001X100100100000X010X01X1001\nmem[28964] = 3377598\nmem[37600] = 15038\nmem[54440] = 13014026\nmem[1872] = 54034\nmask = 010000101X00X0X1101000011X1000X11001\nmem[2672] = 38529642\nmem[4612] = 12358076\nmem[54440] = 698\nmem[11542] = 158875347\nmem[29683] = 130676\nmem[58914] = 13086566\nmask = 001XX001X100X0101X10100001100011X11X\nmem[61472] = 33350\nmem[22694] = 1012806073\nmem[23462] = 118427580\nmask = 0000100110001001XX100111110X100X0100\nmem[33458] = 194706\nmem[6488] = 4762211\nmem[55925] = 577\nmem[53312] = 691832\nmem[33982] = 74563572\nmem[54155] = 673882\nmem[10046] = 455259\nmask = 00X0X001X0001001X1100000000X1X00X00X\nmem[65279] = 18926\nmem[8787] = 404263\nmem[6780] = 192\nmem[57364] = 7578011\nmem[36592] = 1320217\nmask = 01001010X110100X10111101000X10X00110\nmem[10414] = 28478\nmem[8303] = 850886106\nmem[23434] = 109585\nmem[59687] = 55963101\nmem[26357] = 149399655\nmask = 011000010X01100100100X01000X000X1000\nmem[32249] = 957872254\nmem[37097] = 2407\nmem[38976] = 7487\nmask = 0X10000110001XXX1X100X000X10X100X010\nmem[59096] = 256975\nmem[57558] = 187691607\nmem[28499] = 50844685\nmem[21980] = 413222\nmem[9178] = 224473274\nmask = 011010XX00X010010110010000110X000100\nmem[28499] = 13442626\nmem[13668] = 767\nmem[65204] = 1294\nmem[29824] = 761\nmem[7353] = 107008372\nmask = 010010X0111X10011010110X000XXX01010X\nmem[31019] = 2529\nmem[25249] = 531972\nmem[7705] = 1198443\nmem[18755] = 1091\nmask = 0100101001X0100X101110010XXX01X01011\nmem[4011] = 170\nmem[55626] = 1616\nmem[64402] = 1736957\nmem[59367] = 1198\nmask = 00100001X01X10011110X111110110000X00\nmem[16640] = 927178\nmem[62784] = 134127\nmem[52017] = 209325301\nmem[62522] = 310138953\nmem[26793] = 913812410\nmem[13893] = 16876\nmask = X000X010X11X100110101000111010001X01\nmem[62349] = 548\nmem[35033] = 529\nmem[55681] = 98474\nmem[21671] = 462821\nmem[24184] = 15122039\nmask = 011000010X10100X0110100010100000X0X1\nmem[64651] = 19198\nmem[65318] = 860\nmem[30180] = 43025\nmem[33280] = 216670269\nmask = 0X00XX1X011010X1101110X0X0X1X0001000\nmem[30267] = 3237\nmem[28430] = 2022016\nmem[10792] = 19348\nmem[10561] = 879088\nmem[32331] = 1030297216\nmem[53667] = 1950\nmask = 0X1X1010100000111X1011X0X01100101010\nmem[3301] = 228441\nmem[57487] = 133621\nmem[64673] = 14195\nmem[6012] = 106013562\nmask = 0010X00X10011001001X0X0110X00X011X01\nmem[28691] = 7828\nmem[3272] = 5314381\nmem[53221] = 906\nmem[36257] = 483\nmem[39139] = 239793066\nmask = 011000011X0010X01X1X010X0X0X010000XX\nmem[6731] = 146985\nmem[22302] = 5265995\nmem[25582] = 124093\nmem[15205] = 160800\nmem[60546] = 47017168\nmask = 00100001100011XX1110010X0111000101X0\nmem[62302] = 118384\nmem[4442] = 943\nmem[32331] = 829093\nmem[10054] = 261101\nmem[21200] = 2244874\nmask = 000X10010000100101101X110X1001X00101\nmem[22694] = 160856\nmem[57484] = 16648378\nmem[11347] = 265832659\nmask = 0X100011001X1X01001000XX0X01X1111XX1\nmem[39729] = 15425\nmem[10968] = 43923\nmem[15911] = 153\nmask = 0001X001X00010010110010X0000010111X0\nmem[12587] = 58174\nmem[42542] = 272951779\nmem[4845] = 155009\nmem[47818] = 498\nmem[18721] = 12927\nmem[762] = 13549777\nmem[21972] = 1070883192\nmask = 0X00X0101XX0100110100001101XX0XX11X1\nmem[412] = 805494480\nmem[34671] = 511352857\nmem[56856] = 1382270\nmem[63089] = 67321554\nmask = 00000111011X10X11011X101X001X0001010\nmem[62102] = 10598387\nmem[47818] = 1528395\nmem[50481] = 4148455\nmask = 00X010X0111X1001101010000X101110110X\nmem[65185] = 729486\nmem[56292] = 5502033\nmem[12729] = 7021\nmask = 0X10X0010XX1100100100000100XX10X1X0X\nmem[37193] = 844441364\nmem[9631] = 725022597\nmem[37488] = 3522\nmem[53516] = 357\nmask = X000X110XX10101X1011100010X100000X00\nmem[6390] = 164431\nmem[8483] = 115021\nmem[47710] = 243784\nmem[49932] = 1658\nmem[32606] = 257364\nmem[41256] = 2470\nmask = 110X0010XX10101110X100X10X111100100X\nmem[40832] = 65381067\nmem[29277] = 994339\nmem[9389] = 9978911\nmem[21671] = 11603\nmask = 0100100X10101111111X00X010110111X110\nmem[53651] = 1911\nmem[35511] = 88697\nmem[57887] = 177165\nmask = 0XX0100100X01000111011X1X1X01011X1X0\nmem[59444] = 425\nmem[44821] = 7937\nmem[36257] = 1973535\nmem[40669] = 7964428\nmem[57733] = 16992\nmem[31224] = 9670413\nmem[54960] = 99917\nmask = 1111011111111001111XX1X00X011X10000X\nmem[52107] = 52615\nmem[46430] = 2797674\nmem[35037] = 489648\nmem[61728] = 5450284\nmask = 00101X01000010011010010XX00101000X00\nmem[53337] = 167323\nmem[23249] = 144\nmem[49058] = 78020\nmem[65279] = 34789011\nmem[57994] = 278\nmask = X0X11001X000100X1010X00100000111011X\nmem[24461] = 69231\nmem[33718] = 3112488\nmem[1525] = 205706\nmem[24842] = 6365432\nmem[37193] = 983\nmem[41010] = 1250771\nmem[9773] = 492\nmask = 000010000X10100X1110XXX00010001X0X01\nmem[11359] = 19286\nmem[15549] = 671\nmask = 001X000110X01X0X10101010011XX001X000\nmem[90] = 4165576\nmem[7059] = 59706\nmem[4845] = 197\nmem[35511] = 28681534\nmask = 1100XX101110X00X1011X0X0111100001X11\nmem[9839] = 7327\nmem[33097] = 475963031\nmem[47912] = 8358\nmem[43269] = 259178327\nmask = 0X1010X10X101001011X11X1101011X0X1XX\nmem[16654] = 8368090\nmem[41291] = 2146\nmem[20101] = 34091\nmem[21208] = 76242\nmem[35435] = 15664567\nmask = 00101001010010X1011011010X11010XX1X0\nmem[18755] = 314\nmem[44355] = 1709364\nmem[56366] = 15879386\nmem[23427] = 1174\nmem[19831] = 39454\nmask = X1101011001X1X01001X10111001011XX110\nmem[23505] = 402\nmem[47596] = 2233058\nmem[21760] = 45933\nmem[44370] = 27609\nmask = 001010010X0010XXX1101111X0X000X1X01X\nmem[55611] = 1454243\nmem[38591] = 232585\nmem[21621] = 231761578\nmem[10169] = 4045271\nmem[52902] = 35939890\nmem[60957] = 205198448\nmask = 01001000X0X01111X11X111100011011X11X\nmem[32807] = 243712052\nmem[45204] = 774567686\nmem[62717] = 171\nmem[55911] = 132\nmem[39733] = 44429\nmem[53259] = 79063\nmask = 00100001101X1X0110100X11011X0X010000\nmem[54912] = 65854650\nmem[33458] = 865332\nmem[40603] = 96\nmem[62127] = 4144\nmask = 00101001X00X1001XX10000X1X1X0101X000\nmem[37193] = 127119\nmem[21633] = 16917\nmem[36257] = 211\nmask = 01X010110010XXX101100X10X0010100X1X0\nmem[48000] = 1030\nmem[390] = 3489961\nmem[14671] = 218111318\nmem[55181] = 232521891\nmem[56447] = 5498\nmask = 00XX101011111001111100XX10X10111X000\nmem[17945] = 14147766\nmem[5804] = 9317\nmem[3243] = 76354\nmem[39812] = 17121\nmem[65185] = 882507\nmem[24184] = 1503364\nmask = 001011X10110X00X0110X0100100000X0111\nmem[7059] = 77105630\nmem[9842] = 93469\nmem[28235] = 46130\nmask = 00011001X00010010X101111101X000XX00X\nmem[46578] = 188558839\nmem[32794] = 563\nmem[57424] = 16073628\nmem[26204] = 53518555\nmem[21585] = 7589033\nmem[1209] = 174591\nmask = 00X11001000010X1X11XX11100100000001X\nmem[14670] = 552230\nmem[59848] = 230555109\nmem[52210] = 2510\nmem[62683] = 42631\nmem[34868] = 20381\nmem[63506] = 20704\nmem[13543] = 149934393\nmask = 0000X010X1101001111100X000X0X0XXX001\nmem[44146] = 9534\nmem[38367] = 71280\nmem[48566] = 39540\nmem[6301] = 488439556\nmem[16638] = 9302\nmem[13893] = 744336\nmask = 0010000X00001001X1X00001X00110XX0X01\nmem[7422] = 659\nmem[7156] = 536497\nmem[50861] = 75915798\nmask = X1X00010X11010X1101X1X101011010X10X0\nmem[23749] = 197897888\nmem[53516] = 19394\nmem[52597] = 327870\nmem[18755] = 9112\nmem[46245] = 256412\nmem[14234] = 89528\nmem[57220] = 95738416\nmask = 00X01010X000X0X1101X1101011X0111111X\nmem[60185] = 799555\nmem[33559] = 1502644\nmask = X11X001001101011101011100X11X1001XXX\nmem[38795] = 45814003\nmem[16914] = 10781\nmem[22548] = 288\nmask = 011001111X111X011111X0001100001XX11X\nmem[43238] = 115469\nmem[62522] = 25284\nmem[7798] = 116533186\nmem[40416] = 14162\nmem[15067] = 511159\nmem[44546] = 9872\nmask = 0X00X0101000100X10100X01111000001011\nmem[28691] = 35897352\nmem[13371] = 68541533\nmem[31458] = 6263059\nmem[53277] = 8235\nmask = 00XX100100001001011011111XXXXXX10X10\nmem[246] = 4365\nmem[63802] = 28023932\nmem[62691] = 38120268\nmem[32606] = 32155701\nmem[8787] = 73310772\nmem[6000] = 187657\nmem[34053] = 6302546\nmask = 001X001100101X01X01010001XXXXX111001\nmem[62717] = 2689826\nmem[6969] = 3812794\nmem[24914] = 682498819\nmask = 0X10X0010XX010X1011001110X100000X00X\nmem[29061] = 34429630\nmem[60199] = 3521402\nmem[59922] = 1653\nmask = 00101001000010010X100110XX10010X1001\nmem[47632] = 30829832\nmem[40349] = 2360241\nmask = 000011100110101X101X000X010X11001010\nmem[18625] = 2810\nmem[21671] = 6351\nmem[61897] = 11389\nmask = 011000011000X1XX101010XX00100001X000\nmem[32419] = 9855\nmem[54566] = 13281403\nmem[32842] = 3060651\nmem[52744] = 15731\nmask = 11X01111111110011XX1010X1X1001X101XX\nmem[25842] = 357864\nmem[55611] = 4142\nmem[26491] = 1993\nmem[14721] = 46996265\nmem[23074] = 163733\nmask = 0X000XX1X11010X1101X1010X00111000001\nmem[22158] = 121237\nmem[36592] = 656697\nmem[32719] = 676\nmem[33097] = 1034487408\nmem[50670] = 3906154\nmask = 0000001010101X01101X00010X011X1X1101\nmem[47329] = 918208\nmem[1840] = 30632603\nmem[59200] = 2028\nmem[52744] = 32\nmem[30837] = 1214273\nmem[43183] = 3866571\nmask = 0X10X001X000111X1010111X00100X01X1X0\nmem[50788] = 115928382\nmem[50698] = 3427485\nmem[4920] = 452475222\nmem[27354] = 14200\nmem[50989] = 261259\nmem[18721] = 159393273\nmask = 01X011X0011010X11X11X00110XX10001011\nmem[63758] = 15239\nmem[7707] = 2466\nmem[42828] = 51703347\nmem[56944] = 3802\nmem[53539] = 47276878\nmem[51073] = 214485441\nmask = 0010100X010010011110X1100X100X110110\nmem[15448] = 14340\nmem[44061] = 2031\nmem[19707] = 43457433\nmem[40603] = 21065817\nmem[4662] = 30053\nmem[38981] = 1624176\nmem[43872] = 10552\nmask = 0000X0101X1X10011X1X000X1010100101X0\nmem[6012] = 1491\nmem[45255] = 670205912\nmem[7096] = 2912\nmem[4621] = 10593101\nmask = 001010X01111100X10X01001X00110001100\nmem[40984] = 1721577\nmem[56292] = 31350\nmem[27264] = 11075225\nmem[13404] = 35195435\nmask = 0010100110011X01101001X111X0110X1001\nmem[27264] = 1667120\nmem[35927] = 155343034\nmem[40700] = 93937438\nmem[4312] = 16188010\nmem[25983] = 493768\nmask = 00101X0101X01X01011011XX1X10X100X111\nmem[54715] = 79942609\nmem[33413] = 711314\nmem[17167] = 667493\nmem[60601] = 951299\nmask = 0X0X10XX10001XX11X1000010X0110010011\nmem[6829] = 299200\nmem[246] = 7814\nmem[60199] = 134519412\nmem[44196] = 1696\nmask = X11XX111111110011X11XX00101X0111010X\nmem[38202] = 63903\nmem[6488] = 295501257\nmem[15959] = 196571\nmem[56914] = 3039159\nmask = 001000XX0010X0X1XX100010X1X11000010X\nmem[15428] = 17873557\nmem[46435] = 5226\nmem[26157] = 253038623\nmem[29824] = 51824195\nmask = 00100001X000111010100101X1X1X00X0X00\nmem[1886] = 20037780\nmem[23634] = 438988\nmem[53277] = 24774137\nmem[63775] = 1560\nmem[20283] = 16629883\nmem[43116] = 58381263\nmem[44729] = 272355\nmask = 0001X001X00010X101100101100X0001X11X\nmem[56960] = 1407\nmem[12587] = 28256\nmem[49069] = 54282286\nmem[42639] = 202261\nmem[11480] = 7915801\nmem[10095] = 517305\nmem[47429] = 782\nmask = 0X00X00100X0X00101X01111100010X1X00X\nmem[64530] = 2002357\nmem[22346] = 193156\nmem[412] = 6478\nmask = XX0X1111011010X1101X11010X1XX010000X\nmem[16907] = 15143671\nmem[4135] = 1838\nmask = 00101001X11011010110XX1010101X001101\nmem[7156] = 773\nmem[10128] = 2543913\nmem[30159] = 79295\nmem[26178] = 967449\nmask = 001010010100101X111011010001X0110X1X\nmem[47329] = 276882\nmem[24610] = 287174\nmem[8685] = 29977825\nmask = 01001XX011101X01101001XX1X100110110X\nmem[64033] = 250909\nmem[56548] = 10731345\nmem[39241] = 6913465\nmask = 01X000X011101011101110001010X100001X\nmem[51388] = 4106124\nmem[29060] = 4687691\nmem[27501] = 16143\nmem[25418] = 152\nmem[56360] = 3973\nmem[50100] = 7595264";

function makeSystem(param) {
  return {
          bitmask: Caml_array.caml_make_vect(35, undefined),
          memory: Belt_MapInt.fromArray(/* array */[])
        };
}

function intToArray(num) {
  return $$Array.map(Caml_format.caml_int_of_string, ("0".repeat(36) + num.toString(2)).slice(-36, 70).split(""));
}

var $$parseInt = ( x => parseInt(x, 2) );

function arrayToInt(arr) {
  return Curry._1($$parseInt, arr.join(""));
}

function stringToBitmask(str) {
  var chars = str.split("");
  return $$Array.map((function (c) {
                if (c === "X") {
                  return ;
                } else {
                  return Caml_format.caml_int_of_string(c);
                }
              }), chars);
}

function applyBitmask(system, value) {
  var arr = $$Array.mapi((function (i, digit) {
          var match = Caml_array.caml_array_get(system.bitmask, i);
          if (match !== undefined) {
            return match;
          } else {
            return digit;
          }
        }), intToArray(value));
  return Curry._1($$parseInt, arr.join(""));
}

function regexCaptures(re, str) {
  var match = re.exec(str);
  if (match !== null) {
    return $$Array.map((function (prim) {
                  if (prim == null) {
                    return ;
                  } else {
                    return Caml_option.some(prim);
                  }
                }), match);
  }
  
}

function parseMask(line) {
  var re = (/mask = (.*)/);
  var match = regexCaptures(re, line);
  if (match !== undefined) {
    var match$1 = match;
    if (match$1.length !== 2) {
      return ;
    } else {
      return match$1[1];
    }
  }
  
}

function parseMemValue(line) {
  var re = (/mem\[(\d+)\] = (\d+)/);
  var match = regexCaptures(re, line);
  if (match !== undefined) {
    var match$1 = match;
    if (match$1.length !== 3) {
      return ;
    } else {
      var match$2 = match$1[1];
      if (match$2 !== undefined) {
        var match$3 = match$1[2];
        if (match$3 !== undefined) {
          return /* tuple */[
                  Caml_format.caml_int_of_string(match$2),
                  Caml_format.caml_int_of_string(match$3)
                ];
        } else {
          return ;
        }
      } else {
        return ;
      }
    }
  }
  
}

function parseLine(system, line) {
  var InvalidLine = Caml_exceptions.create("InvalidLine");
  var match = parseMask(line);
  var match$1 = parseMemValue(line);
  if (match !== undefined) {
    if (match$1 !== undefined) {
      throw [
            InvalidLine,
            line
          ];
    }
    return {
            bitmask: stringToBitmask(match),
            memory: system.memory
          };
  } else if (match$1 !== undefined) {
    var match$2 = match$1;
    var maskedValue = applyBitmask(system, match$2[1]);
    var memory = Belt_MapInt.set(system.memory, match$2[0], maskedValue);
    return {
            bitmask: system.bitmask,
            memory: memory
          };
  } else {
    throw [
          InvalidLine,
          line
        ];
  }
}

function runProgram(_$staropt$star, _$staropt$star$1, _program) {
  while(true) {
    var program = _program;
    var $staropt$star = _$staropt$star$1;
    var $staropt$star$1 = _$staropt$star;
    var system = $staropt$star$1 !== undefined ? $staropt$star$1 : makeSystem(/* () */0);
    var updater = $staropt$star !== undefined ? $staropt$star : parseLine;
    if (program) {
      var updated = Curry._2(updater, system, program[0]);
      _program = program[1];
      _$staropt$star$1 = updater;
      _$staropt$star = updated;
      continue ;
    } else {
      return system;
    }
  };
}

function parseInput(input) {
  return $$Array.to_list(input.split("\n"));
}

function day1(param) {
  var input = $$Array.to_list(inputStr.split("\n"));
  var system = runProgram(undefined, undefined, input);
  var values = Belt_MapInt.valuesToArray(system.memory);
  return $$Array.fold_left((function (sum, value) {
                return sum + value;
              }), 0, values);
}

console.log("Day 1:", day1(/* () */0));

function applyBitmaskToAddress(system, address) {
  var InvalidBitmaskDigit = Caml_exceptions.create("InvalidBitmaskDigit");
  var bits = intToArray(address);
  var generateAddresses = function (_$staropt$star, _$staropt$star$1, addr) {
    while(true) {
      var $staropt$star = _$staropt$star$1;
      var $staropt$star$1 = _$staropt$star;
      var index = $staropt$star$1 !== undefined ? $staropt$star$1 : 0;
      var addresses = $staropt$star !== undefined ? $staropt$star : /* :: */[
          /* [] */0,
          /* [] */0
        ];
      if (index >= addr.length) {
        return addresses;
      } else {
        var match = Caml_array.caml_array_get(system.bitmask, index);
        if (match !== undefined) {
          var d = match;
          if (d !== 0) {
            if (d !== 1) {
              throw [
                    InvalidBitmaskDigit,
                    d
                  ];
            }
            var generated = List.map((function (a) {
                    return /* :: */[
                            1,
                            a
                          ];
                  }), addresses);
            _$staropt$star$1 = generated;
            _$staropt$star = index + 1 | 0;
            continue ;
          } else {
            var generated$1 = List.map((function(index){
                return function (a) {
                  return /* :: */[
                          Caml_array.caml_array_get(addr, index),
                          a
                        ];
                }
                }(index)), addresses);
            _$staropt$star$1 = generated$1;
            _$staropt$star = index + 1 | 0;
            continue ;
          }
        } else {
          var generated0 = List.map((function (a) {
                  return /* :: */[
                          0,
                          a
                        ];
                }), addresses);
          var generated1 = List.map((function (a) {
                  return /* :: */[
                          1,
                          a
                        ];
                }), addresses);
          _$staropt$star$1 = Pervasives.$at(generated0, generated1);
          _$staropt$star = index + 1 | 0;
          continue ;
        }
      }
    };
  };
  var addresses = generateAddresses(undefined, undefined, bits);
  return List.map((function (addr) {
                var arr = $$Array.of_list(addr);
                return Curry._1($$parseInt, arr.join(""));
              }), List.map(List.rev, addresses));
}

function parseLineDay2(system, line) {
  var InvalidLine = Caml_exceptions.create("InvalidLine");
  var match = parseMask(line);
  var match$1 = parseMemValue(line);
  if (match !== undefined) {
    if (match$1 !== undefined) {
      throw [
            InvalidLine,
            line
          ];
    }
    return {
            bitmask: stringToBitmask(match),
            memory: system.memory
          };
  } else if (match$1 !== undefined) {
    var match$2 = match$1;
    var value = match$2[1];
    var addresses = applyBitmaskToAddress(system, match$2[0]);
    var memory = List.fold_left((function (mem, addr) {
            return Belt_MapInt.set(mem, addr, value);
          }), system.memory, addresses);
    return {
            bitmask: system.bitmask,
            memory: memory
          };
  } else {
    throw [
          InvalidLine,
          line
        ];
  }
}

function day2(param) {
  var input = $$Array.to_list(inputStr.split("\n"));
  var system = runProgram(undefined, parseLineDay2, input);
  var values = Belt_MapInt.valuesToArray(system.memory);
  return $$Array.fold_left((function (sum, value) {
                return sum + value;
              }), 0, values);
}

console.log("Day 2:", day2(/* () */0));

var exampleStr = "mask = XXXXXXXXXXXXXXXXXXXXXXXXXXXXX1XXXX0X\nmem[8] = 11\nmem[7] = 101\nmem[8] = 0";

var exampleStr2 = "mask = 000000000000000000000000000000X1001X\nmem[42] = 100\nmask = 00000000000000000000000000000000X0XX\nmem[26] = 1";

exports.exampleStr = exampleStr;
exports.exampleStr2 = exampleStr2;
exports.inputStr = inputStr;
exports.makeSystem = makeSystem;
exports.intToArray = intToArray;
exports.$$parseInt = $$parseInt;
exports.arrayToInt = arrayToInt;
exports.stringToBitmask = stringToBitmask;
exports.applyBitmask = applyBitmask;
exports.regexCaptures = regexCaptures;
exports.parseMask = parseMask;
exports.parseMemValue = parseMemValue;
exports.parseLine = parseLine;
exports.runProgram = runProgram;
exports.parseInput = parseInput;
exports.day1 = day1;
exports.applyBitmaskToAddress = applyBitmaskToAddress;
exports.parseLineDay2 = parseLineDay2;
exports.day2 = day2;
/* parseInt Not a pure module */
