// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var inputStr = "38\n18\n28\n41\n37\n17\n24\n45\n50\n35\n9\n30\n11\n8\n40\n43\n46\n36\n33\n19\n14\n32\n3\n7\n16\n42\n10\n12\n13\n25\n52\n15\n21\n18\n29\n17\n20\n22\n11\n51\n23\n24\n34\n30\n26\n33\n14\n50\n27\n28\n31\n36\n44\n32\n35\n25\n37\n38\n40\n59\n39\n41\n42\n43\n70\n55\n45\n57\n46\n47\n58\n80\n52\n68\n53\n56\n60\n95\n62\n63\n72\n75\n77\n79\n109\n174\n83\n139\n96\n91\n92\n98\n93\n99\n100\n254\n120\n428\n161\n162\n154\n149\n195\n153\n232\n334\n581\n156\n170\n175\n176\n189\n197\n187\n183\n190\n191\n199\n219\n220\n309\n269\n302\n372\n345\n751\n305\n323\n410\n331\n326\n332\n339\n346\n374\n359\n370\n769\n382\n373\n381\n419\n418\n439\n489\n592\n571\n607\n651\n669\n628\n665\n685\n709\n657\n658\n1068\n792\n705\n1151\n729\n1060\n754\n763\n791\n1010\n1342\n857\n928\n1146\n1163\n1178\n1297\n1515\n1648\n1285\n1438\n1315\n1362\n1363\n1387\n1434\n1459\n1468\n1483\n1492\n1517\n1926\n1620\n1719\n2091\n2003\n2020\n3237\n2309\n2341\n2475\n3011\n2927\n4242\n3640\n2821\n2893\n2846\n4540\n2917\n2902\n4305\n2985\n6130\n3009\n4728\n4094\n3339\n3722\n4023\n4312\n4329\n5294\n4650\n4816\n5296\n8142\n5667\n5714\n5723\n5902\n6707\n8625\n5819\n8708\n8067\n5994\n6324\n6348\n10231\n9006\n9608\n11115\n11625\n10653\n8641\n8979\n9466\n10112\n10483\n10963\n11437\n11381\n11533\n11542\n12672\n14635\n16106\n19949\n17046\n28483\n15814\n22914\n17647\n17620\n17985\n19604\n18107\n18445\n39446\n18753\n19091\n19578\n30985\n34091\n33726\n27251\n24053\n23075\n24214\n27307\n30449\n36137\n36430\n36092\n41861\n33434\n36860\n38669\n66586\n42679\n37198\n36552\n54997\n79211\n37844\n42166\n42653\n47128\n47289\n51360\n48267\n50382\n59505\n51521\n60741\n63883\n69526\n88558\n74396\n80523\n69986\n75221\n148063\n73750\n79851\n88719\n80010\n89294\n99788\n80497\n84819\n102158\n94417\n98649\n131211\n168409\n101903\n148702\n112262\n149996\n137633\n143276\n252154\n143736\n184607\n182248\n148971\n217026\n175653\n164829\n160507\n165316\n259246\n186722\n179236\n272769\n193066\n196320\n200552\n255998\n375556\n364416\n249895\n347564\n292707\n280909\n309478\n309052\n304243\n314287\n342037\n354889\n325336\n530804\n339743\n365958\n526800\n648795\n554792\n435234\n465835\n389386\n859035\n493259\n604784\n542602\n554138\n941502\n573616\n780122\n885693\n613295\n1376736\n963002\n669176\n1047397\n665079\n691294\n1567786\n1222411\n755344\n824620\n928493\n855221\n901069\n882645\n931988\n1334260\n1147386\n1096740\n1207681\n1127754\n1282471\n1186911\n1304589\n1278374\n1334255\n1446638\n1356373\n1360470\n1420423\n2010399\n1579964\n1610565\n1951961\n1656413\n2011531\n1737866\n1756290\n2660962\n1814633\n2214459\n2224494\n3076836\n3804458\n2628104\n2314665\n3184504\n2638844\n2915154\n2612629\n2690628\n4208068\n3531925\n2780893\n3000387\n5691015\n3190529\n3266978\n4537183\n3394279\n5315052\n3552499\n3570923\n4029092\n4039127\n4438953\n4539159\n5708944\n4927294\n5527783\n6661257\n5251473\n7833232\n5781280\n5303257\n5471521\n8718312\n8505581\n5971422\n7610050\n7229656\n6457507\n11162549\n6946778\n11385731\n7123422\n7581591\n8478080\n8068219\n8578286\n8978112\n9466453\n10779256\n10554730\n13849499\n11222895\n13084705\n10774778\n11084537\n11274679\n15841734\n12428929\n12918200\n21777625\n13404285\n14525726\n15601502\n14070200\n14528369\n19752759\n19532842\n15649810\n16546299\n20550990\n22870738\n18444565\n20021183\n21329508\n21639267\n21859315\n31251312\n26488990\n26926271\n26988400\n23703608\n25347129\n25833214\n26322485\n44200246\n53248756\n22406676\n47692529\n28598569\n32196109\n34094375\n38185566\n34990864\n36567482\n38465748\n43188823\n40083832\n41350691\n61082775\n43498582\n51005245\n64298962\n46110284\n47753805\n48239890\n48729161\n60824078\n52155699\n86425456\n56501051\n79888638\n67186973\n60794678\n62692944\n66290484\n69085239\n71558346\n73456612\n105881767\n78549580\n81434523\n123487622\n84849273\n98265983\n91738472\n93864089\n148239523\n94350174\n99909504\n96969051\n100884860\n123688024\n145014958\n117295729\n119193995\n142581582\n127085162\n128983428\n135375723\n139747096\n166054290\n159984103\n195235034\n163398853\n173172995\n175298612\n176587745\n178713362\n185602561\n186088646\n302401386\n191319225\n194259678\n196878555\n260868963\n243466442\n236489724\n244380891\n246279157\n248177423\n262460885\n256068590\n411576276\n321464369\n299731199\n323382956\n430469537\n494966233\n420054187\n351886357\n354011974\n355301107\n607954947\n371691207\n377407871\n668231610\n385578903\n757270110\n433368279\n479956166\n623114155\n480870615\n490660048\n494456580\n562192084\n651617556\n579451546\n621195568\n644847325\n675269313\n677394930\n723577564\n705898331\n707187464\n725703181\n862351255\n726992314\n749099078\n1108637592\n818947182\n971530663\n1430765028\n1371839639\n913324445\n970616214\n1146074136\n1322242255\n985116628\n1200647114\n1513968811\n1286639010\n1224298871\n2430879847\n1320116638\n1352664243\n1383293261\n1450569878\n1413085795\n1432890645\n1719715292\n2559207470\n1568046260\n2415881656\n1732271627\n1790477845\n2131190764\n2920362406\n1883940659\n1898441073\n1955732842\n2185763742\n3415996475\n2209415499\n3241047723\n2510937881\n3905479034\n4386612689\n2672780881\n2703409899\n4056074142\n6336358881\n3018616138\n2845976440\n3000936905\n3358524105\n3300317887\n3451986919\n3616212286\n6204500545\n4069704401\n3782381732\n3839673501\n4917057211\n3854173915\n4141496584\n7441814471\n7310752124\n5450463222\n5214347780\n5376190780\n6526954796\n5673717786\n5518757321\n6844906483\n7757708870\n5846913345\n5864592578\n6146294327\n11360642107\n9504818432\n8369044130\n7068199205\n7398594018\n12444389985\n7622055233\n7636555647\n7693847416\n7995670499\n17126873665\n9355844364\n13155312968\n10590538560\n14881009212\n11192475107\n10894948101\n11365670666\n22973787010\n11383349899\n11711505923\n11993207672\n12010886905\n12932791783\n18781943917\n14466793223\n14690254438\n15063869704\n14704754852\n15020649251\n25585202539\n19059518082\n19019905546\n25958817805\n18586209059\n20739194263\n24866818891\n21973888459\n21485486661\n22087423208\n25897229959\n22905835006\n22749020565\n23094855822\n23376557571\n23704713595\n29395009290\n24943678688\n29171548075\n29710903689\n35803063967\n34040554797\n39798712345\n29725404103\n37108072459\n37606114605\n48784922185\n39325403322\n43488214828\n40071695720\n60746742655\n43572909869\n44722909024\n44234507226\n92357832054\n45654855571\n52144029855\n46453734160\n46471413393\n47081271166\n48648392283\n54115226763\n62549793293\n58882451764\n91315778392\n73298313972\n63765958900\n66833476562\n76433475781\n90377764595\n89750144460\n79397099042\n97798885426\n83559910548\n94186922483\n89889362797\n87807417095\n114693823148\n112997678527\n92108589731\n92126268964\n98597764015\n227691501675\n100586640156\n95729663449\n152927557888\n116665020056\n121432245057\n159469091920\n130599435462\n140199434681\n143163057942\n156583621022\n243749698098\n183537080544\n167204516137\n247276509015\n171367327643\n173449273345\n177696779892\n179916006826\n235271647673\n184234858695\n187838253180\n222018885213\n187855932413\n395468158558\n307403950818\n320132074025\n535667593239\n238097265113\n371393012957\n261631679738\n297803951599\n270798870143\n545501215931\n365181943155\n323788137159\n351439374832\n573164938450\n338571843780\n351146053237\n448495650035\n353365280171\n365552712305\n364150865521\n375694185593\n449469932918\n739845051114\n559435631337\n511644069572\n569035630556\n499728944851\n568602821742\n642191883100\n508896135256\n532430549881\n600203523518\n662985894754\n594587007302\n662359980939\n907607474336\n1008905564255\n689717897017\n702722709301\n995557163271\n1564592793827\n815022645223\n717516145692\n729703577826\n887338255165\n825164118511\n1442567760415\n1008625080107\n1324290585128\n1214366778873\n1685275060288\n1032159494732\n1231588716496\n1041326685137\n1103483142558\n1948934159473\n1194790530820\n1256946988241\n1365082690240\n2880065591108\n2240213796603\n1392440606318\n2379615439050\n1420238854993\n1544726223049\n1447219723518\n2812302413758\n1542680264203\n1554867696337\n3705229709619\n1833789198618\n2298273673378\n2040784574839\n2550702866076\n2812679461311\n2811814684578\n2678808440014\n2272915401633\n2615029385813\n5426844070391\n2677185843234\n3376469462821\n2839660329836\n4259899184829\n2867458578511\n3853141369715\n5397867592764\n6320259095432\n3281008922136\n2989899987721\n5679760992269\n3097547960540\n3583464839042\n8593174497065\n3874573773457\n9554334765726\n5321793496975\n7636368647650\n5292215229047\n4887944787446\n5829560317557\n6864473761178\n4950101244867\n5454689715649\n8707852992527\n5516846173070\n6742032351968\n6573364826763\n5965006539051\n5857358566232\n6087447948261\n11208203882878\n8954906526772\n8614394133610\n6972121733997\n8047649205407\n6681012799582\n9166789002504\n8824675018324\n17781183136114\n9838046032313\n10180160016493\n10404790960516\n10242316473914\n10342634503095\n10466947417937\n12197858972652\n14812265093004\n10971535888719\n11374204739302\n11481852712121\n11822365105283\n11944806514493\n17214438207911\n12538371365814\n12768460747843\n13653134533579\n20709263891851\n21554364755795\n17085803760098\n14728662004989\n21724169186035\n18662721050637\n19004835034817\n20018206048806\n20080362506227\n24908822021482\n20809581921032\n20584950977009\n21314170391814\n21438483306656\n39472302971669\n32291434633153\n22345740628021\n42309120163044\n23304217817404\n23767171619776\n36219273242728\n38743083556864\n25306832113657\n26421595281422\n28381796538568\n35538243926021\n31814465765087\n33391383055626\n45387194619884\n39023041083623\n38680927099443\n39085197541044\n45649958445425\n78108238624667\n41394532898041\n42023434283665\n41899121368823\n42752653698470\n87044491343466\n70495392864530\n47071389437180\n59986444862504\n49725813098826\n48611049931061\n59812978337048\n51728427395079\n67352709691108\n75032645212483\n54803391819990\n67062723638011\n81433580797913\n88465922335221\n75414817339291\n77766124640487\n84735155986469\n80984318909867\n80479730439085";

function parseInput(input) {
  return $$Array.map(Caml_format.caml_float_of_string, input.split("\n"));
}

function sumsOfList(_$staropt$star, _values) {
  while(true) {
    var values = _values;
    var $staropt$star = _$staropt$star;
    var sums = $staropt$star !== undefined ? $staropt$star : /* [] */0;
    if (values) {
      var rest = values[1];
      var head = values[0];
      var headSums = List.map((function(head){
          return function (value) {
            return value + head;
          }
          }(head)), rest);
      _values = rest;
      _$staropt$star = Pervasives.$at(sums, headSums);
      continue ;
    } else {
      return sums;
    }
  };
}

function checkSums(_$staropt$star, preambleLength, _values) {
  while(true) {
    var values = _values;
    var $staropt$star = _$staropt$star;
    var preamble = $staropt$star !== undefined ? $staropt$star : /* [] */0;
    var match = List.rev(preamble);
    if (values) {
      var rest = values[1];
      var head = values[0];
      if (List.length(match) < preambleLength) {
        _values = rest;
        _$staropt$star = /* :: */[
          head,
          preamble
        ];
        continue ;
      } else if (match) {
        var sums = sumsOfList(undefined, preamble);
        var isValid = List.exists((function(head){
            return function (i) {
              return i === head;
            }
            }(head)), sums);
        if (isValid) {
          _values = rest;
          _$staropt$star = /* :: */[
            head,
            List.rev(match[1])
          ];
          continue ;
        } else {
          return head;
        }
      } else {
        return -1;
      }
    } else {
      return -1;
    }
  };
}

function day1(param) {
  var input = parseInput(inputStr);
  return checkSums(undefined, 25, $$Array.to_list(input));
}

console.log("Day 1", day1(/* () */0));

function findSum(_$staropt$star, targetSum, _values) {
  while(true) {
    var values = _values;
    var $staropt$star = _$staropt$star;
    var sums = $staropt$star !== undefined ? $staropt$star : /* [] */0;
    if (values) {
      var head = values[0];
      var added = List.map((function(head){
          return function (param) {
            return /* tuple */[
                    /* :: */[
                      head,
                      param[0]
                    ],
                    param[1] + head
                  ];
          }
          }(head)), sums);
      var match = List.find_opt((function (param) {
              return param[1] === targetSum;
            }), added);
      if (match !== undefined) {
        return match;
      } else {
        _values = values[1];
        _$staropt$star = /* :: */[
          /* tuple */[
            /* :: */[
              head,
              /* [] */0
            ],
            head
          ],
          added
        ];
        continue ;
      }
    } else {
      return ;
    }
  };
}

function day2(param) {
  var NoRangeFound = Caml_exceptions.create("NoRangeFound");
  var input = $$Array.to_list(parseInput(inputStr));
  var invalidNumber = checkSums(undefined, 25, input);
  var match = findSum(undefined, invalidNumber, input);
  if (match !== undefined) {
    var sorted = $$Array.of_list(List.sort((function (a, b) {
                var match = a < b;
                if (match) {
                  return -1;
                } else {
                  return 1;
                }
              }), match[0]));
    var first = Caml_array.caml_array_get(sorted, 0);
    var last = Caml_array.caml_array_get(sorted, sorted.length - 1 | 0);
    return first + last;
  } else {
    throw NoRangeFound;
  }
}

console.log("Day 2", day2(/* () */0));

var exampleStr = "35\n20\n15\n25\n47\n40\n62\n55\n65\n95\n102\n117\n150\n182\n127\n219\n299\n277\n309\n576";

exports.exampleStr = exampleStr;
exports.inputStr = inputStr;
exports.parseInput = parseInput;
exports.sumsOfList = sumsOfList;
exports.checkSums = checkSums;
exports.day1 = day1;
exports.findSum = findSum;
exports.day2 = day2;
/*  Not a pure module */
