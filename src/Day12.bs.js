// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var inputStr = "S2\nW4\nF31\nN2\nE4\nF98\nR180\nW2\nN4\nE1\nL180\nW2\nS5\nF69\nW5\nF12\nE3\nF91\nR90\nE1\nL90\nF73\nW4\nN3\nR90\nF76\nR90\nF33\nW2\nL90\nF51\nE1\nS3\nL180\nF62\nN5\nL180\nN3\nE1\nL90\nF83\nR180\nW4\nF29\nE2\nL90\nL90\nN3\nW1\nS1\nE2\nL270\nL180\nN2\nE1\nF77\nN2\nF11\nL180\nE2\nF45\nN4\nW5\nS2\nL90\nN2\nF14\nL90\nW3\nF6\nN5\nE2\nR90\nE2\nL90\nF39\nL90\nF45\nW2\nF67\nW4\nF50\nE1\nF92\nW5\nF75\nN2\nW1\nS3\nR90\nW5\nF51\nL90\nE3\nF71\nN3\nE3\nF74\nE4\nS3\nW2\nL180\nE2\nS5\nL270\nR90\nN2\nR90\nE4\nL270\nS5\nE4\nW3\nL90\nN2\nF32\nE3\nN5\nE2\nR180\nF27\nS1\nR90\nF94\nE2\nF82\nN3\nL90\nF100\nW4\nL90\nS1\nE4\nF26\nR90\nR90\nF12\nW4\nF70\nL90\nF100\nW4\nS2\nR90\nE3\nF11\nL90\nF32\nL180\nS2\nF11\nS2\nL90\nS3\nE4\nF93\nS1\nR90\nS2\nF20\nE2\nF9\nS5\nF23\nE4\nS2\nF38\nL90\nN3\nF3\nE2\nF37\nN2\nF89\nE5\nF43\nR90\nF88\nN5\nF52\nW5\nF24\nE4\nL180\nS4\nE3\nF14\nL90\nS2\nE5\nL180\nN4\nF98\nN4\nW2\nS2\nW1\nS3\nR90\nF98\nE4\nR270\nE2\nF45\nL90\nF75\nR180\nW3\nL180\nF42\nE2\nN4\nL90\nF2\nR180\nW5\nE5\nN5\nR180\nF92\nL90\nF95\nE3\nF61\nS5\nE2\nL180\nE1\nE2\nF27\nS3\nW2\nS1\nF86\nR270\nS1\nL90\nR90\nE5\nS2\nS2\nF93\nE2\nR270\nN3\nW3\nF74\nR90\nF94\nE2\nF88\nS1\nR90\nW4\nL90\nN5\nF59\nR90\nN1\nF24\nS2\nF10\nL90\nF72\nL90\nF55\nN2\nE1\nR90\nN1\nE1\nF12\nL90\nS5\nE5\nF44\nL180\nS4\nE2\nE5\nS1\nE5\nR180\nS1\nR90\nN3\nL90\nE2\nS4\nL90\nR90\nW1\nR90\nE5\nN1\nL90\nN1\nE3\nS5\nW1\nS1\nL270\nE2\nE4\nF31\nS2\nE4\nN2\nW3\nL90\nF7\nS3\nF23\nS3\nE1\nF15\nS1\nL90\nE4\nS1\nL90\nN3\nW1\nF13\nR180\nS3\nF37\nN3\nW5\nS5\nL90\nF55\nF54\nR90\nE1\nN4\nF68\nS5\nF3\nL180\nF75\nN3\nR90\nW4\nF78\nS4\nS3\nR180\nN2\nR90\nN1\nF20\nL180\nF12\nS4\nE4\nL180\nF10\nE2\nN5\nE3\nF13\nE3\nL90\nF55\nE5\nF96\nW1\nF100\nR90\nF97\nW4\nW2\nN4\nW4\nN3\nE4\nR90\nS1\nW4\nF80\nW2\nL90\nF64\nW5\nS2\nW3\nR180\nW1\nS2\nF83\nR180\nF37\nW4\nN4\nF57\nE3\nR90\nF37\nS4\nR180\nF62\nR90\nS5\nF9\nE3\nN4\nL90\nW4\nR90\nF97\nW4\nR180\nF2\nW4\nS1\nF77\nL180\nR90\nE4\nF58\nS2\nL90\nE1\nN3\nL90\nN2\nW4\nN1\nL90\nF94\nE1\nR90\nF29\nS3\nL180\nE2\nR180\nS5\nF62\nL90\nN2\nR90\nE4\nF93\nL90\nE5\nN4\nL180\nN3\nF20\nR90\nE3\nL90\nS3\nF24\nE4\nR90\nE4\nF89\nN1\nF13\nR180\nW1\nL90\nS3\nW5\nS4\nL180\nW3\nF90\nS4\nE3\nF36\nS3\nE2\nF37\nE5\nF31\nL90\nF68\nS5\nF74\nL90\nF59\nR180\nF20\nN1\nL180\nN5\nL90\nE3\nN2\nW4\nF54\nL90\nF77\nR270\nS5\nF82\nR90\nE2\nL180\nF59\nR90\nE5\nR90\nF26\nE4\nF91\nR90\nW4\nF6\nW5\nF34\nS4\nF61\nW2\nS2\nR270\nF45\nR180\nN5\nL90\nF26\nL90\nR90\nS1\nW3\nN5\nW5\nL90\nN3\nL90\nN3\nE3\nL90\nF1\nE4\nL90\nF60\nN3\nF7\nS1\nE1\nF68\nL90\nN5\nE5\nF36\nW3\nS5\nL270\nN2\nE1\nR90\nF8\nS3\nE1\nR90\nN1\nE2\nR90\nN1\nF90\nE2\nF63\nS2\nF17\nS1\nE3\nL90\nE4\nL180\nN4\nW1\nS4\nL90\nS5\nF15\nW1\nN5\nW3\nF97\nS3\nL90\nS2\nF78\nN3\nW5\nL90\nF68\nE3\nF24\nS3\nL90\nW2\nL90\nF49\nW4\nR90\nF82\nR270\nS1\nN3\nL90\nS4\nR90\nS2\nF46\nL180\nE4\nL180\nW2\nR90\nL90\nN1\nF88\nL180\nS5\nR90\nS4\nL90\nF68\nW5\nF13\nE4\nS3\nF91\nW3\nF85\nL180\nN4\nW5\nS3\nF89\nW1\nL180\nS2\nE3\nF82\nL90\nS4\nW5\nN5\nW2\nS4\nS2\nF82\nE2\nN4\nL90\nF80\nE2\nF49\nW5\nS3\nF76\nL90\nS1\nF41\nS3\nE1\nF26\nE3\nF53\nE2\nF73\nW3\nR180\nN2\nR90\nN3\nR90\nF16\nL90\nN3\nN1\nW5\nF19\nR90\nN4\nW5\nF6\nE3\nN5\nW2\nN3\nE4\nS4\nL90\nE3\nS2\nF9\nL180\nF70\nN5\nS4\nF63\nN3\nE1\nR180\nS3\nL90\nE5\nL90\nF76\nR180\nE2\nL180\nL90\nF24\nE5\nS5\nF98\nS3\nF97\nN5\nR90\nN5\nF43\nW1\nR180\nF38\nR180\nF13\nW2\nF16\nR90\nF6\nN1\nF98\nR180\nN2\nE1\nF19\nL90\nS1\nF33\nR90\nN3\nF75\nN4\nL180\nF35\nW1\nF61";

function directionToDegrees(direction) {
  switch (direction) {
    case /* N */0 :
        return 0;
    case /* S */1 :
        return 180;
    case /* E */2 :
        return 90;
    case /* W */3 :
        return 270;
    
  }
}

function makeShip(param) {
  return {
          facing: 90,
          position: /* tuple */[
            0,
            0
          ],
          waypoint: /* tuple */[
            10,
            -1
          ]
        };
}

function stringToAction(str) {
  var InvalidInput = Caml_exceptions.create("InvalidInput");
  var re = (/([A-Z]+)(\d+)/);
  var match = re.exec(str);
  var match_;
  if (match !== null) {
    match_ = $$Array.map((function (prim) {
            if (prim == null) {
              return ;
            } else {
              return Caml_option.some(prim);
            }
          }), match);
  } else {
    throw [
          InvalidInput,
          str
        ];
  }
  if (match_.length !== 3) {
    throw [
          InvalidInput,
          str
        ];
  }
  var match$1 = match_[1];
  if (match$1 !== undefined) {
    switch (match$1) {
      case "E" :
          var match$2 = match_[2];
          if (match$2 !== undefined) {
            return /* Direction */Block.__(0, [
                      /* E */2,
                      Caml_format.caml_int_of_string(match$2)
                    ]);
          } else {
            throw [
                  InvalidInput,
                  str
                ];
          }
      case "F" :
          var match$3 = match_[2];
          if (match$3 !== undefined) {
            return /* Relative */Block.__(1, [
                      /* F */2,
                      Caml_format.caml_int_of_string(match$3)
                    ]);
          } else {
            throw [
                  InvalidInput,
                  str
                ];
          }
      case "L" :
          var match$4 = match_[2];
          if (match$4 !== undefined) {
            return /* Relative */Block.__(1, [
                      /* L */0,
                      Caml_format.caml_int_of_string(match$4)
                    ]);
          } else {
            throw [
                  InvalidInput,
                  str
                ];
          }
      case "N" :
          var match$5 = match_[2];
          if (match$5 !== undefined) {
            return /* Direction */Block.__(0, [
                      /* N */0,
                      Caml_format.caml_int_of_string(match$5)
                    ]);
          } else {
            throw [
                  InvalidInput,
                  str
                ];
          }
      case "R" :
          var match$6 = match_[2];
          if (match$6 !== undefined) {
            return /* Relative */Block.__(1, [
                      /* R */1,
                      Caml_format.caml_int_of_string(match$6)
                    ]);
          } else {
            throw [
                  InvalidInput,
                  str
                ];
          }
      case "S" :
          var match$7 = match_[2];
          if (match$7 !== undefined) {
            return /* Direction */Block.__(0, [
                      /* S */1,
                      Caml_format.caml_int_of_string(match$7)
                    ]);
          } else {
            throw [
                  InvalidInput,
                  str
                ];
          }
      case "W" :
          var match$8 = match_[2];
          if (match$8 !== undefined) {
            return /* Direction */Block.__(0, [
                      /* W */3,
                      Caml_format.caml_int_of_string(match$8)
                    ]);
          } else {
            throw [
                  InvalidInput,
                  str
                ];
          }
      default:
        throw [
              InvalidInput,
              str
            ];
    }
  } else {
    throw [
          InvalidInput,
          str
        ];
  }
}

function parseInput(input) {
  return $$Array.map(stringToAction, input.split("\n"));
}

function directionValues(amount, direction) {
  switch (direction) {
    case /* N */0 :
        return /* tuple */[
                0,
                Caml_int32.imul(-1, amount)
              ];
    case /* S */1 :
        return /* tuple */[
                0,
                amount
              ];
    case /* E */2 :
        return /* tuple */[
                amount,
                0
              ];
    case /* W */3 :
        return /* tuple */[
                Caml_int32.imul(-1, amount),
                0
              ];
    
  }
}

function degreesToDirection(degrees) {
  var InvalidDegrees = Caml_exceptions.create("InvalidDegrees");
  if (degrees >= 91) {
    if (degrees !== 180) {
      if (degrees !== 270) {
        throw [
              InvalidDegrees,
              degrees
            ];
      } else {
        return /* W */3;
      }
    } else {
      return /* S */1;
    }
  } else if (degrees !== 0) {
    if (degrees >= 90) {
      return /* E */2;
    } else {
      throw [
            InvalidDegrees,
            degrees
          ];
    }
  } else {
    return /* N */0;
  }
}

function move(action, ship) {
  if (action.tag) {
    switch (action[0]) {
      case /* L */0 :
          return {
                  facing: Pervasives.abs((ship.facing + 360 | 0) - action[1] | 0) % 360,
                  position: ship.position,
                  waypoint: ship.waypoint
                };
      case /* R */1 :
          return {
                  facing: (ship.facing + action[1] | 0) % 360,
                  position: ship.position,
                  waypoint: ship.waypoint
                };
      case /* F */2 :
          var match = directionValues(action[1], degreesToDirection(ship.facing));
          var match$1 = ship.position;
          return {
                  facing: ship.facing,
                  position: /* tuple */[
                    match$1[0] + match[0] | 0,
                    match$1[1] + match[1] | 0
                  ],
                  waypoint: ship.waypoint
                };
      
    }
  } else {
    var match$2 = directionValues(action[1], action[0]);
    var match$3 = ship.position;
    return {
            facing: ship.facing,
            position: /* tuple */[
              match$3[0] + match$2[0] | 0,
              match$3[1] + match$2[1] | 0
            ],
            waypoint: ship.waypoint
          };
  }
}

function day1(param) {
  var input = parseInput(inputStr);
  var ship = $$Array.fold_left((function (s, action) {
          return move(action, s);
        }), {
        facing: 90,
        position: /* tuple */[
          0,
          0
        ],
        waypoint: /* tuple */[
          10,
          -1
        ]
      }, input);
  var match = ship.position;
  return Pervasives.abs(match[0]) + Pervasives.abs(match[1]) | 0;
}

console.log("Day 1:", day1(/* () */0));

function moveToWaypoint(_times, _ship) {
  while(true) {
    var ship = _ship;
    var times = _times;
    if (times === 0) {
      return ship;
    } else {
      var match = ship.waypoint;
      var match$1 = ship.position;
      var moved_facing = ship.facing;
      var moved_position = /* tuple */[
        match$1[0] + match[0] | 0,
        match$1[1] + match[1] | 0
      ];
      var moved_waypoint = ship.waypoint;
      var moved = {
        facing: moved_facing,
        position: moved_position,
        waypoint: moved_waypoint
      };
      _ship = moved;
      _times = times - 1 | 0;
      continue ;
    }
  };
}

function rotateLeft(_times, _param) {
  while(true) {
    var param = _param;
    var times = _times;
    var y = param[1];
    var x = param[0];
    if (times === 0) {
      return /* tuple */[
              x,
              y
            ];
    } else {
      _param = /* tuple */[
        y,
        Caml_int32.imul(x, -1)
      ];
      _times = times - 1 | 0;
      continue ;
    }
  };
}

function rotateRight(_times, _param) {
  while(true) {
    var param = _param;
    var times = _times;
    var y = param[1];
    var x = param[0];
    if (times === 0) {
      return /* tuple */[
              x,
              y
            ];
    } else {
      _param = /* tuple */[
        Caml_int32.imul(y, -1),
        x
      ];
      _times = times - 1 | 0;
      continue ;
    }
  };
}

function move2(action, ship) {
  if (action.tag) {
    switch (action[0]) {
      case /* L */0 :
          return {
                  facing: ship.facing,
                  position: ship.position,
                  waypoint: rotateLeft(action[1] / 90 | 0, ship.waypoint)
                };
      case /* R */1 :
          return {
                  facing: ship.facing,
                  position: ship.position,
                  waypoint: rotateRight(action[1] / 90 | 0, ship.waypoint)
                };
      case /* F */2 :
          return moveToWaypoint(action[1], ship);
      
    }
  } else {
    var match = directionValues(action[1], action[0]);
    var match$1 = ship.waypoint;
    return {
            facing: ship.facing,
            position: ship.position,
            waypoint: /* tuple */[
              match$1[0] + match[0] | 0,
              match$1[1] + match[1] | 0
            ]
          };
  }
}

function day2(param) {
  var input = parseInput(inputStr);
  var ship = $$Array.fold_left((function (s, action) {
          return move2(action, s);
        }), {
        facing: 90,
        position: /* tuple */[
          0,
          0
        ],
        waypoint: /* tuple */[
          10,
          -1
        ]
      }, input);
  var match = ship.position;
  return Pervasives.abs(match[0]) + Pervasives.abs(match[1]) | 0;
}

console.log("Day 2:", day2(/* () */0));

var exampleInput = "F10\nN3\nF7\nR90\nF11";

exports.exampleInput = exampleInput;
exports.inputStr = inputStr;
exports.directionToDegrees = directionToDegrees;
exports.makeShip = makeShip;
exports.stringToAction = stringToAction;
exports.parseInput = parseInput;
exports.directionValues = directionValues;
exports.degreesToDirection = degreesToDirection;
exports.move = move;
exports.day1 = day1;
exports.moveToWaypoint = moveToWaypoint;
exports.rotateLeft = rotateLeft;
exports.rotateRight = rotateRight;
exports.move2 = move2;
exports.day2 = day2;
/*  Not a pure module */
