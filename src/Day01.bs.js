// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

var inputStr = "1895\n1504\n1660\n1775\n1743\n1607\n1267\n1133\n292\n1646\n1285\n1808\n1512\n1839\n1869\n1578\n1318\n1385\n1829\n1800\n1491\n1600\n1290\n1856\n1781\n1881\n1953\n2008\n1681\n1472\n1846\n2010\n1619\n1584\n1849\n1876\n1744\n1980\n1421\n911\n1308\n1762\n1398\n1470\n1974\n1902\n1985\n2001\n1926\n1374\n1678\n1523\n1894\n1597\n1778\n1940\n1362\n1613\n1629\n1473\n1633\n1867\n1838\n1931\n1850\n1776\n1689\n1311\n1947\n1988\n1779\n1381\n1683\n1677\n1675\n1587\n767\n1401\n1412\n1544\n1484\n618\n1755\n1073\n1970\n1735\n1770\n1623\n1665\n1783\n1400\n1892\n1921\n1506\n1978\n1731\n1739\n1515\n1354\n1264\n1394\n1763\n1569\n1453\n1539\n2006\n1586\n1855\n1609\n1729\n1624\n506\n1668\n1803\n1486\n1767\n1720\n1753\n1994\n1718\n1922\n1314\n1250\n1516\n1546\n1625\n1708\n1286\n1993\n1785\n491\n1705\n1924\n1752\n1888\n1651\n1604\n1750\n1547\n1481\n1704\n1851\n904\n1920\n1939\n1277\n1870\n1934\n1617\n1833\n1797\n1817\n1967\n1935\n1914\n1621\n1468\n1859\n1552\n1640\n1709\n1121\n1973\n1343\n1266\n1806\n1360\n1299\n1990\n1356\n1631\n1555\n1811\n1323\n1794\n1550\n1448\n1848\n1826\n1723\n1891\n1302\n1655\n947\n1580\n1908\n1641\n1816\n1701\n1871\n1588\n1843\n1643\n1893\n1866\n1628\n1417\n1795\n1995\n1937";

var input = $$Array.to_list($$Array.map(Caml_format.caml_int_of_string, $$Array.map((function (prim) {
                return prim.trim();
              }), inputStr.split("\n"))));

function findSumEntries(first, _list, targetSum) {
  while(true) {
    var list = _list;
    if (list) {
      var head = list[0];
      if ((first + head | 0) === targetSum) {
        return /* tuple */[
                first,
                head
              ];
      } else {
        _list = list[1];
        continue ;
      }
    } else {
      return ;
    }
  };
}

function findSum(_list, sum) {
  while(true) {
    var list = _list;
    if (list) {
      var rest = list[1];
      var match = findSumEntries(list[0], rest, sum);
      if (match !== undefined) {
        return match;
      } else {
        _list = rest;
        continue ;
      }
    } else {
      return ;
    }
  };
}

var values = Belt_Option.map(findSum(input, 2020), (function (param) {
        return Caml_int32.imul(param[0], param[1]);
      }));

console.log(values);

function findSum3(_list) {
  while(true) {
    var list = _list;
    console.log("findsum3");
    if (list) {
      var rest = list[1];
      var head = list[0];
      var rem = 2020 - head | 0;
      console.log("rem", rem);
      var match = findSum(rest, rem);
      if (match !== undefined) {
        var match$1 = match;
        return /* tuple */[
                head,
                match$1[0],
                match$1[1]
              ];
      } else {
        console.log(rest);
        _list = rest;
        continue ;
      }
    } else {
      return ;
    }
  };
}

var values$1 = Belt_Option.map(findSum3(input), (function (param) {
        return Caml_int32.imul(Caml_int32.imul(param[0], param[1]), param[2]);
      }));

console.log(values$1);

var _inputStr = "23\n      1721\n    979\n    1\n    366\n    299\n    675\n    1456";

var sumToFind = 2020;

exports.inputStr = inputStr;
exports._inputStr = _inputStr;
exports.input = input;
exports.sumToFind = sumToFind;
exports.findSumEntries = findSumEntries;
exports.findSum = findSum;
exports.findSum3 = findSum3;
exports.values = values$1;
/* input Not a pure module */
