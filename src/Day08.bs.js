// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Belt_SetInt = require("bs-platform/lib/js/belt_SetInt.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var exampleInput = "nop +0\nacc +1\njmp +4\nacc +3\njmp -3\nacc -99\nacc +1\njmp -4\nacc +6";

var inputStr = "jmp +27\nacc +32\nacc +10\nacc +23\njmp +88\nacc +46\nacc -3\njmp +209\nacc +1\njmp +159\nacc +29\njmp +328\nacc +44\njmp +14\nacc +14\njmp +557\nnop +127\nacc +34\nnop +227\njmp +214\njmp +512\njmp +78\njmp +544\nacc +14\nacc +5\nacc -11\njmp +291\nacc +5\nnop +115\njmp +166\nacc +2\njmp +1\njmp +500\njmp +244\njmp +186\nacc +43\nacc +26\njmp +502\nacc +14\nnop +63\njmp +115\nacc -11\nnop +153\nacc +3\nnop +107\njmp +468\nacc -6\nacc +38\nacc +0\njmp +102\nacc +27\nacc -9\nacc +45\njmp +186\nnop +457\nacc +14\njmp +483\nnop +35\nacc +27\njmp +202\njmp -55\njmp +1\nacc +33\nacc -2\nacc +5\njmp +296\nacc +17\nacc +11\nacc +36\nnop +11\njmp +10\nacc +20\nnop +115\nacc +37\njmp +284\nacc +39\nacc +40\njmp +1\njmp +1\njmp +233\nacc +42\nacc +27\njmp +1\nnop +189\njmp +329\njmp +118\nacc +13\njmp -82\nacc +18\nacc -1\nacc +23\njmp +104\nacc +25\nacc +5\nacc +49\njmp +274\nacc +35\njmp +1\njmp +45\nacc -1\njmp +128\njmp +110\nacc +11\nacc +48\nnop +316\nacc -15\njmp +150\nnop +396\nacc +19\nacc +15\njmp +129\nacc +17\nacc +42\njmp +1\nacc +13\njmp +333\nnop -24\nacc +5\nacc -9\nacc -14\njmp +129\nacc +14\nnop +486\nacc -4\njmp +274\njmp +269\nacc +0\nacc +36\nacc +8\njmp -102\nacc -3\nacc +18\njmp +162\nacc +16\nacc +26\nnop +313\nacc +9\njmp -26\nacc +16\njmp +383\nacc +10\njmp +245\njmp +119\njmp -57\nacc +17\njmp +75\nacc +13\njmp +452\nacc -13\nacc -13\njmp -115\nacc +18\njmp +97\nacc +0\njmp -28\nacc +43\njmp +401\nacc -17\njmp +91\nacc +16\nacc +22\nacc +42\njmp +244\nnop +376\nacc +36\nacc +20\nacc +32\njmp -157\nacc -6\nacc +33\njmp +295\njmp -20\nacc -2\nacc +7\njmp +305\nnop -76\nacc +18\nacc +24\njmp +89\nacc -8\nacc -1\njmp +171\nacc +40\nacc +11\nacc +15\nacc +43\njmp +234\njmp +1\nacc +45\nnop +343\njmp -140\nacc +40\nacc -6\nacc +35\njmp +67\nacc -5\nacc +2\nacc +32\nacc +32\njmp +199\nacc +40\nacc +19\njmp +337\nacc -1\nacc -14\nacc +34\njmp +266\nnop +265\nacc -1\nacc +31\njmp +151\njmp -206\nacc +49\nacc +24\nacc -16\njmp -82\njmp -117\nnop +238\nacc -10\njmp +150\nacc +26\nnop -95\nacc +21\njmp +59\nnop -13\nacc +45\nacc +45\njmp +350\njmp +285\nacc +28\nacc +31\nacc +6\njmp -106\njmp +294\nnop -142\nacc +13\nnop +347\nacc +43\njmp +79\nacc +7\njmp +368\nacc +35\nacc +1\nacc +4\njmp +355\nacc -10\njmp -175\nacc +35\njmp -3\nacc -2\nacc +35\nacc +33\nacc +34\njmp -154\nacc +27\njmp +131\nacc -18\njmp +74\nacc -14\nnop +173\njmp +79\nnop -82\nacc +26\nacc -4\nnop -237\njmp +270\njmp +118\nacc +0\nacc +34\njmp -212\nnop -59\njmp -150\nacc +26\njmp +224\njmp +1\nacc -18\njmp +85\nnop -134\nacc +6\njmp -136\nacc +4\njmp -246\nacc +9\nacc +24\njmp -105\nnop +99\nacc -13\nacc -15\nnop +286\njmp -187\njmp -276\nacc -14\nacc -12\njmp +148\nacc -18\njmp -254\nacc +23\nacc -10\nacc +32\nacc +49\njmp +39\nacc -10\nacc +10\nacc -17\nacc +39\njmp +19\njmp +236\njmp -205\nacc +0\nacc +5\nacc -15\njmp +41\nacc +28\nacc -18\nnop -20\njmp -175\njmp +23\nacc +36\nnop +198\njmp +223\njmp +1\nnop -60\nacc +28\njmp +118\nacc +12\nacc +9\njmp +159\nnop +176\nnop +11\nacc -1\njmp +183\nacc -6\nacc +16\njmp -43\nacc -17\nnop +222\nacc -4\njmp +1\njmp -21\nacc +43\nacc +42\nacc -2\nacc +12\njmp +168\nacc +10\nacc +38\nnop -159\njmp +94\nacc +5\nacc -1\njmp -317\njmp -294\njmp +42\nacc +11\nacc +38\nacc +27\nacc +0\njmp -63\njmp -57\nacc +23\njmp -111\nnop +1\nacc -12\njmp -91\nacc +22\nacc -1\nnop -163\njmp +1\njmp -165\nacc -12\nacc -7\nacc -9\nacc +37\njmp +82\nacc -10\nacc +29\nacc +0\nnop +200\njmp -129\nacc +13\nacc +33\njmp -33\nacc +27\njmp -172\njmp +57\njmp -234\njmp -141\nacc +35\nnop +202\nacc -6\njmp +51\nacc +10\njmp -8\njmp -291\nacc +36\nacc +25\njmp -263\njmp +211\nacc +21\nacc -7\nacc -6\nnop -222\njmp -247\nacc -8\nacc +29\njmp -21\nacc +0\njmp -256\njmp +1\nacc +37\nnop +55\nacc +40\njmp -266\nacc +17\njmp +200\njmp +1\nacc +7\nacc +10\nacc +24\njmp -6\nacc +8\njmp -104\nnop -64\nacc +3\nnop -391\nacc +26\njmp +6\nacc +12\nacc -9\nnop +110\njmp -420\njmp -411\nnop -273\nnop -287\nacc +39\njmp +117\njmp -119\nacc +38\njmp +119\nacc +0\njmp -430\nacc -14\njmp -231\nacc +26\nacc +1\nacc -13\nacc +15\njmp -208\njmp +1\nacc +50\njmp -263\nacc +14\njmp +1\nacc +31\njmp -13\nnop -334\nnop +76\nnop -435\nnop -52\njmp +131\nnop +53\nacc +19\nnop -213\nacc +5\njmp -338\nacc +48\nacc +22\nacc +43\nacc +1\njmp -377\nacc +38\njmp -268\nnop -269\nacc +20\nacc +6\nnop -395\njmp -415\njmp +1\njmp -398\nacc -12\nacc -10\nacc -18\njmp +1\njmp +94\njmp -358\njmp -313\nacc +12\nacc +20\nacc -13\njmp -110\nacc +28\nacc +12\nacc +42\nacc +43\njmp +101\nacc -14\njmp -6\nacc +25\nacc -7\nacc +5\njmp -420\nacc -4\njmp -89\nacc -17\nnop -499\njmp -379\nnop -395\nacc +37\nacc +30\nacc +5\njmp -25\njmp +63\njmp +71\nacc -3\njmp -24\njmp -117\nacc -6\njmp +1\nacc +26\nnop -212\njmp -498\njmp -395\njmp -210\nacc +44\nacc +12\nacc +21\njmp +40\nacc +43\njmp -382\nnop -509\nacc -17\njmp -111\njmp -16\nacc +31\njmp -306\njmp -22\nacc +50\nacc +47\njmp -398\nnop -300\njmp -246\njmp +49\nacc +0\nacc +12\nacc +7\nnop -6\njmp -109\nacc -19\nacc +21\nacc -19\nnop -355\njmp -418\njmp -245\nacc +50\njmp +1\nnop -3\njmp -177\nacc +29\nacc +40\nacc -15\nnop -123\njmp -305\nnop -313\nacc -3\nacc +50\njmp -530\njmp -398\nacc +16\nacc +29\nnop -358\nacc +37\njmp -165\njmp -193\njmp -132\nacc +21\njmp -355\njmp -450\njmp -456\nacc +25\nacc +49\nacc +50\nacc +0\njmp -60\nacc +5\nacc -15\njmp -565\nacc +10\nacc -9\nacc -3\njmp -220\nacc +44\nacc -10\njmp -70\nacc -17\njmp -174\njmp -168\nacc +6\nacc +35\njmp -133\nacc -12\nacc +41\nacc +41\njmp -580\nacc +45\nacc +27\nacc +12\nacc +0\njmp -24\nacc +35\nnop -507\nnop -27\nnop -456\njmp -379\njmp -222\nacc +6\nacc +43\nacc -9\nacc +45\njmp +1";

var InvalidInstruction = Caml_exceptions.create("Day08.InvalidInstruction");

function stringToInstruction(instruction) {
  var re = /(\w+)\s([+-])(\d+)/;
  var result = re.exec(instruction);
  if (result !== null) {
    var match = $$Array.map((function (prim) {
            if (prim == null) {
              return ;
            } else {
              return Caml_option.some(prim);
            }
          }), result);
    if (match.length !== 4) {
      throw [
            InvalidInstruction,
            instruction
          ];
    }
    var match$1 = match[1];
    if (match$1 !== undefined) {
      switch (match$1) {
        case "acc" :
            var match$2 = match[2];
            if (match$2 !== undefined) {
              switch (match$2) {
                case "+" :
                    var value = match[3];
                    if (value !== undefined) {
                      return /* Acc */Block.__(0, [Caml_format.caml_int_of_string(value)]);
                    }
                    throw [
                          InvalidInstruction,
                          instruction
                        ];
                case "-" :
                    var value$1 = match[3];
                    if (value$1 !== undefined) {
                      return /* Acc */Block.__(0, [Caml_int32.imul(-1, Caml_format.caml_int_of_string(value$1))]);
                    }
                    throw [
                          InvalidInstruction,
                          instruction
                        ];
                default:
                  throw [
                        InvalidInstruction,
                        instruction
                      ];
              }
            } else {
              throw [
                    InvalidInstruction,
                    instruction
                  ];
            }
        case "jmp" :
            var match$3 = match[2];
            if (match$3 !== undefined) {
              switch (match$3) {
                case "+" :
                    var value$2 = match[3];
                    if (value$2 !== undefined) {
                      return /* Jmp */Block.__(1, [Caml_format.caml_int_of_string(value$2)]);
                    }
                    throw [
                          InvalidInstruction,
                          instruction
                        ];
                case "-" :
                    var value$3 = match[3];
                    if (value$3 !== undefined) {
                      return /* Jmp */Block.__(1, [Caml_int32.imul(-1, Caml_format.caml_int_of_string(value$3))]);
                    }
                    throw [
                          InvalidInstruction,
                          instruction
                        ];
                default:
                  throw [
                        InvalidInstruction,
                        instruction
                      ];
              }
            } else {
              throw [
                    InvalidInstruction,
                    instruction
                  ];
            }
        case "nop" :
            var match$4 = match[2];
            if (match$4 !== undefined) {
              switch (match$4) {
                case "+" :
                    var value$4 = match[3];
                    if (value$4 !== undefined) {
                      return /* Nop */Block.__(2, [Caml_format.caml_int_of_string(value$4)]);
                    }
                    throw [
                          InvalidInstruction,
                          instruction
                        ];
                case "-" :
                    var value$5 = match[3];
                    if (value$5 !== undefined) {
                      return /* Nop */Block.__(2, [Caml_int32.imul(-1, Caml_format.caml_int_of_string(value$5))]);
                    }
                    throw [
                          InvalidInstruction,
                          instruction
                        ];
                default:
                  throw [
                        InvalidInstruction,
                        instruction
                      ];
              }
            } else {
              throw [
                    InvalidInstruction,
                    instruction
                  ];
            }
        default:
          throw [
                InvalidInstruction,
                instruction
              ];
      }
    } else {
      throw [
            InvalidInstruction,
            instruction
          ];
    }
  } else {
    throw [
          InvalidInstruction,
          instruction
        ];
  }
}

function parseInput(input) {
  var lines = $$Array.map(stringToInstruction, input.split("\n"));
  return {
          accumulator: 0,
          instructions: lines,
          pos: 0
        };
}

function step(program) {
  if (program.pos >= program.instructions.length) {
    return /* Complete */Block.__(1, [program]);
  }
  var instruction = Caml_array.caml_array_get(program.instructions, program.pos);
  switch (instruction.tag | 0) {
    case /* Acc */0 :
        return /* Running */Block.__(0, [{
                    accumulator: program.accumulator + instruction[0] | 0,
                    instructions: program.instructions,
                    pos: program.pos + 1 | 0
                  }]);
    case /* Jmp */1 :
        return /* Running */Block.__(0, [{
                    accumulator: program.accumulator,
                    instructions: program.instructions,
                    pos: program.pos + instruction[0] | 0
                  }]);
    case /* Nop */2 :
        return /* Running */Block.__(0, [{
                    accumulator: program.accumulator,
                    instructions: program.instructions,
                    pos: program.pos + 1 | 0
                  }]);
    
  }
}

var program = parseInput(exampleInput);

function runUntilRepeatInstruction(_seenOpt, _result) {
  while(true) {
    var seenOpt = _seenOpt;
    var result = _result;
    var seen = seenOpt !== undefined ? Caml_option.valFromOption(seenOpt) : Belt_SetInt.fromArray([]);
    if (result.tag) {
      return /* Success */Block.__(1, [result[0].accumulator]);
    }
    var program = result[0];
    if (Belt_SetInt.has(seen, program.pos)) {
      return /* InfiniteLoop */Block.__(0, [program.accumulator]);
    }
    _result = step(program);
    _seenOpt = Caml_option.some(Belt_SetInt.add(seen, program.pos));
    continue ;
  };
}

function day1(param) {
  var NoInfiniteLoop = Caml_exceptions.create("NoInfiniteLoop");
  var seen = Belt_SetInt.fromArray([]);
  var program = parseInput(inputStr);
  var value = runUntilRepeatInstruction(Caml_option.some(seen), /* Running */Block.__(0, [program]));
  if (!value.tag) {
    return value[0];
  }
  throw [
        NoInfiniteLoop,
        value[0]
      ];
}

console.log("Day 1:", day1(undefined));

function instructionAtPos(program, pos) {
  if (pos >= program.instructions.length) {
    return ;
  } else {
    return Caml_array.caml_array_get(program.instructions, pos);
  }
}

function swapInstruction(program, pos) {
  var value = Caml_array.caml_array_get(program.instructions, pos);
  var updatedInstruction;
  switch (value.tag | 0) {
    case /* Acc */0 :
        updatedInstruction = value;
        break;
    case /* Jmp */1 :
        updatedInstruction = /* Nop */Block.__(2, [value[0]]);
        break;
    case /* Nop */2 :
        updatedInstruction = /* Jmp */Block.__(1, [value[0]]);
        break;
    
  }
  var instructions = $$Array.copy(program.instructions);
  Caml_array.caml_array_set(instructions, pos, updatedInstruction);
  return {
          accumulator: program.accumulator,
          instructions: instructions,
          pos: program.pos
        };
}

function findInstructionToSwap(_pos, program, _exec) {
  while(true) {
    var exec = _exec;
    var pos = _pos;
    if (exec.tag) {
      return exec[0].accumulator;
    }
    var value = runUntilRepeatInstruction(undefined, /* Running */Block.__(0, [exec[0]]));
    if (value.tag) {
      return value[0];
    }
    var swapped = swapInstruction(program, pos);
    _exec = /* Running */Block.__(0, [swapped]);
    _pos = pos + 1 | 0;
    continue ;
  };
}

function day2(param) {
  var program = parseInput(inputStr);
  return findInstructionToSwap(0, program, /* Running */Block.__(0, [program]));
}

console.log("Day 2:", day2(undefined));

exports.exampleInput = exampleInput;
exports.inputStr = inputStr;
exports.InvalidInstruction = InvalidInstruction;
exports.stringToInstruction = stringToInstruction;
exports.parseInput = parseInput;
exports.step = step;
exports.program = program;
exports.runUntilRepeatInstruction = runUntilRepeatInstruction;
exports.day1 = day1;
exports.instructionAtPos = instructionAtPos;
exports.swapInstruction = swapInstruction;
exports.findInstructionToSwap = findInstructionToSwap;
exports.day2 = day2;
/* program Not a pure module */
