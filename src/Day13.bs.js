// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var inputStr = "1006697\n13,x,x,41,x,x,x,x,x,x,x,x,x,641,x,x,x,x,x,x,x,x,x,x,x,19,x,x,x,x,17,x,x,x,x,x,x,x,x,x,x,x,29,x,661,x,x,x,x,x,37,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,23";

function parseInput(input) {
  var InvalidInput = Caml_exceptions.create("InvalidInput");
  var lines = input.split("\n");
  if (lines.length !== 2) {
    throw [
          InvalidInput,
          input
        ];
  }
  var timestamp = lines[0];
  var buses = lines[1];
  return {
          timestamp: Caml_format.caml_float_of_string(timestamp),
          buses: List.map((function (i) {
                  if (i === "x") {
                    return ;
                  } else {
                    return Caml_format.caml_int_of_string(i);
                  }
                }), $$Array.to_list(buses.split(",")))
        };
}

function canLeave(timestamp, bus) {
  var fDiv = timestamp / bus;
  var iDiv = Math.floor(fDiv);
  return fDiv === iDiv;
}

function findEarliestBus(_param) {
  while(true) {
    var param = _param;
    var buses = param.buses;
    var timestamp = param.timestamp;
    var foundBus = List.find_opt((function(timestamp){
        return function (bus) {
          if (bus !== undefined) {
            return canLeave(timestamp, bus);
          } else {
            return false;
          }
        }
        }(timestamp)), buses);
    if (foundBus !== undefined) {
      var match = Caml_option.valFromOption(foundBus);
      if (match !== undefined) {
        return /* tuple */[
                match,
                timestamp
              ];
      } else {
        _param = {
          timestamp: timestamp + 1,
          buses: buses
        };
        continue ;
      }
    } else {
      _param = {
        timestamp: timestamp + 1,
        buses: buses
      };
      continue ;
    }
  };
}

function day1(param) {
  var input = parseInput(inputStr);
  console.log(input);
  var match = findEarliestBus(input);
  return match[0] * (match[1] - input.timestamp);
}

console.log("Day 1:", day1(/* () */0));

function firstBus(_buses) {
  while(true) {
    var buses = _buses;
    var NoBus = Caml_exceptions.create("NoBus");
    if (buses) {
      var _head = buses[0];
      if (_head !== undefined) {
        return _head;
      } else {
        _buses = buses[1];
        continue ;
      }
    } else {
      throw NoBus;
    }
  };
}

function findSequentialDepartures(_timestamp, buses) {
  while(true) {
    var timestamp = _timestamp;
    var first = firstBus(buses);
    var isValid = List.fold_left((function(timestamp){
        return function (valid, param) {
          var entry = param[1];
          if (entry !== undefined) {
            var validBus = canLeave(timestamp + param[0], entry);
            if (valid) {
              return validBus;
            } else {
              return false;
            }
          } else {
            return valid;
          }
        }
        }(timestamp)), true, List.mapi((function (index, bus) {
                return /* tuple */[
                        index,
                        bus
                      ];
              }), buses));
    if (isValid) {
      return timestamp;
    } else {
      _timestamp = timestamp + first;
      continue ;
    }
  };
}

function day2(param) {
  var input = parseInput(inputStr);
  return findSequentialDepartures(100000000000000, input.buses);
}

console.log("Day 2:", day2(/* () */0));

var exampleStr = "939\n7,13,x,x,59,x,31,19";

exports.exampleStr = exampleStr;
exports.inputStr = inputStr;
exports.parseInput = parseInput;
exports.canLeave = canLeave;
exports.findEarliestBus = findEarliestBus;
exports.day1 = day1;
exports.firstBus = firstBus;
exports.findSequentialDepartures = findSequentialDepartures;
exports.day2 = day2;
/*  Not a pure module */
